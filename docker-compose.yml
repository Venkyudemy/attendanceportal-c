version: '3.8'

services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        ENABLE_SSL: "false"
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - TZ=Asia/Kolkata
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URL=mongodb://mongo:27017/attendanceportal
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TZ=Asia/Kolkata
      - MONGODB_URI=mongodb://mongo:27017/attendanceportal
      - WORKING_HOURS_START=09:00
      - WORKING_HOURS_END=17:45
      - LATE_THRESHOLD_MINUTES=15
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=/app/uploads
      - FRONTEND_ORIGIN=http://localhost:3000
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./Backend/scripts:/app/scripts:ro
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo '‚è≥ Waiting for MongoDB to be ready...' &&
        until nc -z mongo 27017; do
          echo 'Waiting for MongoDB...'
          sleep 2
        done &&
        echo '‚úÖ MongoDB is ready' &&
        echo 'üîß Running initialization scripts...' &&
        node scripts/createAdmin.js || echo 'Admin creation failed or already exists' &&
        node scripts/addEmployee.js || echo 'Employee creation failed or already exists' &&
        node check-employee.js || echo 'Employee check failed' &&
        echo 'üéØ CAMERA CAPTURE IMAGE DISPLAY FIX...' &&
        node -e \"
          const mongoose = require('mongoose');
          const Employee = require('./models/Employee');
          const fs = require('fs');
          const path = require('path');

          console.log('üéØ CAMERA CAPTURE IMAGE DISPLAY FIX - Starting...');

          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              console.log('‚úÖ Connected to MongoDB');
              
              // Find all image files on disk
              console.log('\nüìÅ SCANNING CAMERA CAPTURE IMAGES BY EMPLOYEE NAME...');
              const uploadsDir = '/app/uploads/employees';
              const diskFiles = {};
              
              if (fs.existsSync(uploadsDir)) {
                const employeeDirs = fs.readdirSync(uploadsDir);
                console.log('Found employee directories:', employeeDirs);
                
                for (const empDir of employeeDirs) {
                  const empPath = path.join(uploadsDir, empDir);
                  if (fs.statSync(empPath).isDirectory()) {
                    const files = fs.readdirSync(empPath);
                    const imageFiles = files.filter(file => 
                      file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')
                    );
                    diskFiles[empDir] = imageFiles;
                    console.log('Employee directory ' + empDir + ' has camera capture images:', imageFiles);
                  }
                }
              } else {
                console.log('‚ùå Uploads directory does not exist! Creating it...');
                fs.mkdirSync(uploadsDir, { recursive: true });
              }
              
              // Create employee name-based directories
              console.log('\nüìÅ CREATING EMPLOYEE NAME-BASED DIRECTORIES...');
              const employees = await Employee.find({});
              for (const emp of employees) {
                const empId = emp._id.toString();
                const empName = emp.name.replace(/[^a-zA-Z0-9]/g, '_'); // Clean name for folder
                const empNameDir = path.join(uploadsDir, empName);
                const empIdDir = path.join(uploadsDir, empId);
                
                console.log('üë§ Processing employee:', emp.name, '-> Folder:', empName);
                
                // Create name-based directory if it doesn't exist
                if (!fs.existsSync(empNameDir)) {
                  fs.mkdirSync(empNameDir, { recursive: true });
                  console.log('  ‚úÖ Created employee name folder:', empNameDir);
                }
                
                // Move images from ID-based folder to name-based folder
                if (fs.existsSync(empIdDir)) {
                  const files = fs.readdirSync(empIdDir);
                  const imageFiles = files.filter(file => 
                    file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')
                  );
                  
                  for (const imageFile of imageFiles) {
                    const sourcePath = path.join(empIdDir, imageFile);
                    const destPath = path.join(empNameDir, imageFile);
                    
                    if (!fs.existsSync(destPath)) {
                      fs.copyFileSync(sourcePath, destPath);
                      console.log('  üì∏ Copied image to name folder:', imageFile, '->', empName);
                    }
                  }
                  
                  // Update diskFiles to use name-based paths
                  diskFiles[empName] = imageFiles;
                }
              }
              
              // Process employees with name-based folders
              console.log('\nüë• PROCESSING EMPLOYEES WITH NAME-BASED FOLDERS...');
              let totalFixed = 0;
              
              // Fix each employee's camera capture images using name-based folders
              for (const emp of employees) {
                console.log('\nüë§ PROCESSING EMPLOYEE:', emp.name, '(ID:', emp._id + ')');
                
                const empId = emp._id.toString();
                const empName = emp.name.replace(/[^a-zA-Z0-9]/g, '_'); // Clean name for folder
                let needsUpdate = false;
                
                // Ensure attendance structure exists
                if (!emp.attendance) {
                  emp.attendance = {};
                }
                if (!emp.attendance.today) {
                  emp.attendance.today = {};
                }
                
                // Check if employee has camera capture images in name-based folder
                if (diskFiles[empName] && diskFiles[empName].length > 0) {
                  console.log('  üì∏ Found camera capture images in name folder:', diskFiles[empName]);
                  
                  // Find check-in camera capture image
                  let checkinImage = diskFiles[empName].find(file => 
                    file.toLowerCase().includes('checkin') || 
                    file.toLowerCase().includes('check-in') ||
                    file.toLowerCase().includes('in')
                  );
                  
                  // Find check-out camera capture image
                  let checkoutImage = diskFiles[empName].find(file => 
                    file.toLowerCase().includes('checkout') || 
                    file.toLowerCase().includes('check-out') ||
                    file.toLowerCase().includes('out')
                  );
                  
                  // If no specific images found, use first two images
                  if (!checkinImage && diskFiles[empName].length > 0) {
                    checkinImage = diskFiles[empName][0];
                    console.log('  üéØ Using first camera capture image as check-in:', checkinImage);
                  }
                  
                  if (!checkoutImage && diskFiles[empName].length > 1) {
                    checkoutImage = diskFiles[empName][1];
                    console.log('  üéØ Using second camera capture image as check-out:', checkoutImage);
                  }
                  
                  // Update check-in camera capture image path with employee name
                  if (checkinImage) {
                    const checkinPath = '/uploads/employees/' + empName + '/' + checkinImage;
                    if (emp.attendance.today.checkInImage !== checkinPath) {
                      emp.attendance.today.checkInImage = checkinPath;
                      needsUpdate = true;
                      console.log('  ‚úÖ SET check-in camera capture image (by name):', checkinPath);
                      totalFixed++;
                    }
                  }
                  
                  // Update check-out camera capture image path with employee name
                  if (checkoutImage) {
                    const checkoutPath = '/uploads/employees/' + empName + '/' + checkoutImage;
                    if (emp.attendance.today.checkOutImage !== checkoutPath) {
                      emp.attendance.today.checkOutImage = checkoutPath;
                      needsUpdate = true;
                      console.log('  ‚úÖ SET check-out camera capture image (by name):', checkoutPath);
                      totalFixed++;
                    }
                  }
                } else {
                  console.log('  ‚ùå No camera capture images found for employee:', emp.name);
                }
                
                if (needsUpdate) {
                  await emp.save();
                  console.log('  üíæ Saved employee record with name-based camera capture images');
                }
              }
              
              console.log('\nüéØ CAMERA CAPTURE IMAGE DISPLAY FIX COMPLETE!');
              console.log('üìä Total camera capture image paths fixed:', totalFixed);
              console.log('üéØ CAMERA CAPTURE IMAGES WILL NOW DISPLAY IN ADMIN PANEL!');
              
              process.exit(0);
            })
            .catch(err => {
              console.error('‚ùå Camera capture image display fix error:', err);
              process.exit(1);
            });
        \" &&
        echo 'üöÄ Starting backend server...' &&
        npm start
      "

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - attendance-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: mongod --bind_ip_all

volumes:
  mongo_data:
    driver: local
  uploads_data:
    driver: local

networks:
  attendance-network:
    driver: bridge