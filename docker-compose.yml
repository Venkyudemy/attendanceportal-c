version: '3.8'

services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        ENABLE_SSL: "false"
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - TZ=Asia/Kolkata
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URL=mongodb://mongo:27017/attendanceportal
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TZ=Asia/Kolkata
      - MONGODB_URI=mongodb://mongo:27017/attendanceportal
      - WORKING_HOURS_START=09:00
      - WORKING_HOURS_END=17:45
      - LATE_THRESHOLD_MINUTES=15
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=/app/uploads
      - FRONTEND_ORIGIN=http://localhost:3000
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./Backend/scripts:/app/scripts:ro
      - uploads_data:/app/uploads
    command: >
      sh -c "
        echo 'üöÄ Starting development backend...' &&
        echo '‚è≥ Waiting for MongoDB to be ready...' &&
        sleep 10 &&
        echo 'üîç Checking if admin user exists...' &&
        node -e \"
          const mongoose = require('mongoose');
          const User = require('./models/User');
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              const adminExists = await User.findOne({ role: 'admin' });
              if (!adminExists) {
                console.log('üë§ Admin user not found, creating...');
                require('./scripts/createAdmin.js');
                require('./scripts/addEmployee.js');
              } else {
                console.log('‚úÖ Admin user already exists, skipping initialization');
              }
            })
            .catch(err => {
              console.log('‚ùå Error checking admin user:', err.message);
            });
        \" &&
        echo 'üîç Verifying employee database and image storage...' &&
        node check-employee.js &&
        echo 'üì∏ Ensuring uploads directory structure...' &&
        mkdir -p /app/uploads/employees &&
        echo 'üîß COMPREHENSIVE IMAGE PATH FIXING...' &&
        node -e \"
          const mongoose = require('mongoose');
          const Employee = require('./models/Employee');
          const fs = require('fs');
          const path = require('path');
          
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              console.log('üîç COMPREHENSIVE IMAGE PATH CHECK - Starting...');
              
              const employees = await Employee.find({});
              let totalFixed = 0;
              
              for (const emp of employees) {
                console.log('\nüë§ Processing employee:', emp.name, '(ID:', emp._id + ')');
                
                if (emp.attendance?.today) {
                  const today = emp.attendance.today;
                  let needsUpdate = false;
                  
                  // Check check-in image
                  if (today.checkInImage) {
                    const fullPath = path.join('/app', today.checkInImage);
                    console.log('   üì∏ Current check-in path:', today.checkInImage);
                    console.log('   üìÅ Full path:', fullPath);
                    console.log('   ‚úÖ File exists:', fs.existsSync(fullPath));
                    
                    if (!fs.existsSync(fullPath)) {
                      const employeeDir = path.join('/app/uploads/employees', emp._id.toString());
                      console.log('   üîç Checking directory:', employeeDir);
                      
                      if (fs.existsSync(employeeDir)) {
                        const files = fs.readdirSync(employeeDir);
                        console.log('   üìÅ Files in directory:', files);
                        
                        // Find any checkin image
                        const checkinFiles = files.filter(file => 
                          file.toLowerCase().includes('checkin') && 
                          (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg'))
                        );
                        
                        if (checkinFiles.length > 0) {
                          const correctPath = '/uploads/employees/' + emp._id.toString() + '/' + checkinFiles[0];
                          today.checkInImage = correctPath;
                          needsUpdate = true;
                          console.log('   üîß FIXED check-in path:', correctPath);
                          totalFixed++;
                        }
                      } else {
                        console.log('   ‚ùå Employee directory does not exist');
                      }
                    }
                  }
                  
                  // Check check-out image
                  if (today.checkOutImage) {
                    const fullPath = path.join('/app', today.checkOutImage);
                    console.log('   üì∏ Current check-out path:', today.checkOutImage);
                    console.log('   üìÅ Full path:', fullPath);
                    console.log('   ‚úÖ File exists:', fs.existsSync(fullPath));
                    
                    if (!fs.existsSync(fullPath)) {
                      const employeeDir = path.join('/app/uploads/employees', emp._id.toString());
                      
                      if (fs.existsSync(employeeDir)) {
                        const files = fs.readdirSync(employeeDir);
                        
                        const checkoutFiles = files.filter(file => 
                          file.toLowerCase().includes('checkout') && 
                          (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg'))
                        );
                        
                        if (checkoutFiles.length > 0) {
                          const correctPath = '/uploads/employees/' + emp._id.toString() + '/' + checkoutFiles[0];
                          today.checkOutImage = correctPath;
                          needsUpdate = true;
                          console.log('   üîß FIXED check-out path:', correctPath);
                          totalFixed++;
                        }
                      }
                    }
                  }
                  
                  if (needsUpdate) {
                    await emp.save();
                    console.log('   üíæ Saved employee record');
                  }
                }
              }
              
              console.log('\n‚úÖ COMPREHENSIVE FIX COMPLETE!');
              console.log('üìä Total paths fixed:', totalFixed);
              
              // Show final status
              console.log('\nüìã FINAL STATUS:');
              for (const emp of employees) {
                if (emp.attendance?.today) {
                  const today = emp.attendance.today;
                  console.log('üë§', emp.name + ':');
                  if (today.checkInImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkInImage));
                    console.log('   üì∏ Check-in:', today.checkInImage, exists ? '‚úÖ' : '‚ùå');
                  }
                  if (today.checkOutImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkOutImage));
                    console.log('   üì∏ Check-out:', today.checkOutImage, exists ? '‚úÖ' : '‚ùå');
                  }
                }
              }
              
              process.exit(0);
            })
            .catch(err => {
              console.error('‚ùå Comprehensive fix error:', err);
              process.exit(1);
            });
        \" &&
        echo 'üöÄ Starting backend server...' &&
        npm start
      "

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - attendance-network
    command: mongod --bind_ip_all

volumes:
  mongo_data:
    driver: local
  uploads_data:
    driver: local

networks:
  attendance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
