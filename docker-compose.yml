version: '3.8'

services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        ENABLE_SSL: "false"
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - TZ=Asia/Kolkata
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URL=mongodb://mongo:27017/attendanceportal
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TZ=Asia/Kolkata
      - MONGODB_URI=mongodb://mongo:27017/attendanceportal
      - WORKING_HOURS_START=09:00
      - WORKING_HOURS_END=17:45
      - LATE_THRESHOLD_MINUTES=15
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=/app/uploads
      - FRONTEND_ORIGIN=http://localhost:3000
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./Backend/scripts:/app/scripts:ro
      - uploads_data:/app/uploads
    command: >
      sh -c "
        echo 'üéØ BULLETPROOF BACKEND INITIALIZATION - Starting...' &&
        echo '‚è≥ Waiting for MongoDB to be ready...' &&
        sleep 15 &&
        echo 'üîç Checking if admin user exists...' &&
        node -e \"
          const mongoose = require('mongoose');
          const User = require('./models/User');
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              const adminExists = await User.findOne({ role: 'admin' });
              if (!adminExists) {
                console.log('üë§ Admin user not found, creating...');
                require('./scripts/createAdmin.js');
                require('./scripts/addEmployee.js');
              } else {
                console.log('‚úÖ Admin user already exists, skipping initialization');
              }
            })
            .catch(err => {
              console.log('‚ùå Error checking admin user:', err.message);
            });
        \" &&
        echo 'üîç Verifying employee database and image storage...' &&
        node check-employee.js &&
        echo 'üì∏ Ensuring uploads directory structure...' &&
        mkdir -p /app/uploads/employees &&
        echo 'üéØ DEFINITIVE CAMERA CAPTURE IMAGE FIX...' &&
        node -e \"
          const mongoose = require('mongoose');
          const Employee = require('./models/Employee');
          const fs = require('fs');
          const path = require('path');

          console.log('üéØ DEFINITIVE CAMERA CAPTURE IMAGE FIX - Starting...');

          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              console.log('‚úÖ Connected to MongoDB');
              
              // Step 1: Scan ALL files on disk
              console.log('\nüìÅ STEP 1: SCANNING ALL FILES ON DISK...');
              const uploadsDir = '/app/uploads/employees';
              const diskFiles = {};
              
              if (fs.existsSync(uploadsDir)) {
                const employeeDirs = fs.readdirSync(uploadsDir);
                console.log('Found employee directories:', employeeDirs);
                
                for (const empDir of employeeDirs) {
                  const empPath = path.join(uploadsDir, empDir);
                  if (fs.statSync(empPath).isDirectory()) {
                    const files = fs.readdirSync(empPath);
                    const imageFiles = files.filter(file => 
                      file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')
                    );
                    diskFiles[empDir] = imageFiles;
                    console.log('Employee ' + empDir + ' has images:', imageFiles);
                  }
                }
              } else {
                console.log('‚ùå Uploads directory does not exist! Creating it...');
                fs.mkdirSync(uploadsDir, { recursive: true });
              }
              
              // Step 2: Get ALL employees from database
              console.log('\nüë• STEP 2: GETTING ALL EMPLOYEES FROM DATABASE...');
              const employees = await Employee.find({});
              console.log('Found', employees.length, 'employees in database');
              
              let totalFixed = 0;
              let totalProcessed = 0;
              
              // Step 3: Fix each employee
              for (const emp of employees) {
                console.log('\nüë§ PROCESSING EMPLOYEE:', emp.name, '(ID:', emp._id + ')');
                totalProcessed++;
                
                const empId = emp._id.toString();
                let needsUpdate = false;
                
                // Ensure attendance structure exists
                if (!emp.attendance) {
                  emp.attendance = {};
                }
                if (!emp.attendance.today) {
                  emp.attendance.today = {};
                }
                
                // Check check-in image
                console.log('   üîç Checking check-in image...');
                if (emp.attendance.today.checkInImage) {
                  const fullPath = path.join('/app', emp.attendance.today.checkInImage);
                  console.log('   üì∏ Current path:', emp.attendance.today.checkInImage);
                  console.log('   üìÅ Full path:', fullPath);
                  console.log('   ‚úÖ File exists:', fs.existsSync(fullPath));
                  
                  if (!fs.existsSync(fullPath)) {
                    console.log('   üîß File not found, searching for alternatives...');
                    
                    // Look for any check-in related image
                    if (diskFiles[empId]) {
                      let checkinImage = diskFiles[empId].find(file => 
                        file.toLowerCase().includes('checkin') || 
                        file.toLowerCase().includes('check-in') ||
                        file.toLowerCase().includes('in')
                      );
                      
                      // If no specific check-in image, use the first image
                      if (!checkinImage && diskFiles[empId].length > 0) {
                        checkinImage = diskFiles[empId][0];
                        console.log('   üéØ Using first available image as check-in:', checkinImage);
                      }
                      
                      if (checkinImage) {
                        const correctPath = '/uploads/employees/' + empId + '/' + checkinImage;
                        emp.attendance.today.checkInImage = correctPath;
                        needsUpdate = true;
                        console.log('   ‚úÖ FIXED check-in path:', correctPath);
                        totalFixed++;
                      }
                    }
                  } else {
                    console.log('   ‚úÖ Check-in image path is correct');
                  }
                }
                
                // Check check-out image
                console.log('   üîç Checking check-out image...');
                if (emp.attendance.today.checkOutImage) {
                  const fullPath = path.join('/app', emp.attendance.today.checkOutImage);
                  console.log('   üì∏ Current path:', emp.attendance.today.checkOutImage);
                  console.log('   üìÅ Full path:', fullPath);
                  console.log('   ‚úÖ File exists:', fs.existsSync(fullPath));
                  
                  if (!fs.existsSync(fullPath)) {
                    console.log('   üîß File not found, searching for alternatives...');
                    
                    // Look for any check-out related image
                    if (diskFiles[empId]) {
                      let checkoutImage = diskFiles[empId].find(file => 
                        file.toLowerCase().includes('checkout') || 
                        file.toLowerCase().includes('check-out') ||
                        file.toLowerCase().includes('out')
                      );
                      
                      if (checkoutImage) {
                        const correctPath = '/uploads/employees/' + empId + '/' + checkoutImage;
                        emp.attendance.today.checkOutImage = correctPath;
                        needsUpdate = true;
                        console.log('   ‚úÖ FIXED check-out path:', correctPath);
                        totalFixed++;
                      }
                    }
                  } else {
                    console.log('   ‚úÖ Check-out image path is correct');
                  }
                }
                
                // Save if changes were made
                if (needsUpdate) {
                  await emp.save();
                  console.log('   üíæ Saved employee record');
                }
              }
              
              // Step 4: Final verification
              console.log('\nüìã STEP 4: FINAL VERIFICATION...');
              console.log('üìä Total employees processed:', totalProcessed);
              console.log('üìä Total paths fixed:', totalFixed);
              
              const finalEmployees = await Employee.find({});
              for (const emp of finalEmployees) {
                if (emp.attendance?.today) {
                  const today = emp.attendance.today;
                  console.log('\nüë§', emp.name + ':');
                  if (today.checkInImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkInImage));
                    console.log('   üì∏ Check-in:', today.checkInImage, exists ? '‚úÖ' : '‚ùå');
                  } else {
                    console.log('   üì∏ Check-in: No image');
                  }
                  if (today.checkOutImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkOutImage));
                    console.log('   üì∏ Check-out:', today.checkOutImage, exists ? '‚úÖ' : '‚ùå');
                  } else {
                    console.log('   üì∏ Check-out: No image');
                  }
                }
              }
              
              console.log('\nüéØ DEFINITIVE CAMERA CAPTURE FIX COMPLETE!');
              console.log('‚úÖ All camera capture image paths have been verified and fixed!');
              
              process.exit(0);
            })
            .catch(err => {
              console.error('‚ùå Definitive camera capture fix error:', err);
              process.exit(1);
            });
        \" &&
        echo 'üöÄ Starting backend server...' &&
        npm start
      "

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - attendance-network
    command: mongod --bind_ip_all

volumes:
  mongo_data:
    driver: local
  uploads_data:
    driver: local

networks:
  attendance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
