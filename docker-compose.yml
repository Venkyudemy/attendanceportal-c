version: '3.8'

services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        ENABLE_SSL: "false"
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - TZ=Asia/Kolkata
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URL=mongodb://mongo:27017/attendanceportal
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TZ=Asia/Kolkata
      - MONGODB_URI=mongodb://mongo:27017/attendanceportal
      - WORKING_HOURS_START=09:00
      - WORKING_HOURS_END=17:45
      - LATE_THRESHOLD_MINUTES=15
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=/app/uploads
      - FRONTEND_ORIGIN=http://localhost:3000
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./Backend/scripts:/app/scripts:ro
      - uploads_data:/app/uploads
    command: >
      sh -c "
        echo '🎯 CAMERA CAPTURE IMAGE DISPLAY FIX - Starting...' &&
        echo '⏳ Waiting for MongoDB to be ready...' &&
        sleep 15 &&
        echo '🔍 Checking if admin user exists...' &&
        node -e \"
          const mongoose = require('mongoose');
          const User = require('./models/User');
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              const adminExists = await User.findOne({ role: 'admin' });
              if (!adminExists) {
                console.log('👤 Admin user not found, creating...');
                require('./scripts/createAdmin.js');
                require('./scripts/addEmployee.js');
              } else {
                console.log('✅ Admin user already exists, skipping initialization');
              }
            })
            .catch(err => {
              console.log('❌ Error checking admin user:', err.message);
            });
        \" &&
        echo '🔍 Verifying employee database and image storage...' &&
        node check-employee.js &&
        echo '📸 Ensuring uploads directory structure...' &&
        mkdir -p /app/uploads/employees &&
        echo '🎯 CAMERA CAPTURE IMAGE DISPLAY FIX...' &&
        node -e \"
          const mongoose = require('mongoose');
          const Employee = require('./models/Employee');
          const fs = require('fs');
          const path = require('path');

          console.log('🎯 CAMERA CAPTURE IMAGE DISPLAY FIX - Starting...');

          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              console.log('✅ Connected to MongoDB');
              
              // Find all image files on disk
              console.log('\n📁 SCANNING CAMERA CAPTURE IMAGES...');
              const uploadsDir = '/app/uploads/employees';
              const diskFiles = {};
              
              if (fs.existsSync(uploadsDir)) {
                const employeeDirs = fs.readdirSync(uploadsDir);
                console.log('Found employee directories:', employeeDirs);
                
                for (const empDir of employeeDirs) {
                  const empPath = path.join(uploadsDir, empDir);
                  if (fs.statSync(empPath).isDirectory()) {
                    const files = fs.readdirSync(empPath);
                    const imageFiles = files.filter(file => 
                      file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')
                    );
                    diskFiles[empDir] = imageFiles;
                    console.log('Employee ' + empDir + ' has camera capture images:', imageFiles);
                  }
                }
              } else {
                console.log('❌ Uploads directory does not exist! Creating it...');
                fs.mkdirSync(uploadsDir, { recursive: true });
              }
              
              // Get all employees
              const employees = await Employee.find({});
              console.log('Found', employees.length, 'employees in database');
              
              let totalFixed = 0;
              
              // Fix each employee's camera capture images
              for (const emp of employees) {
                console.log('\n👤 PROCESSING EMPLOYEE:', emp.name, '(ID:', emp._id + ')');
                
                const empId = emp._id.toString();
                let needsUpdate = false;
                
                // Ensure attendance structure exists
                if (!emp.attendance) {
                  emp.attendance = {};
                }
                if (!emp.attendance.today) {
                  emp.attendance.today = {};
                }
                
                // Check if employee has camera capture images on disk
                if (diskFiles[empId] && diskFiles[empId].length > 0) {
                  console.log('  📸 Found camera capture images:', diskFiles[empId]);
                  
                  // Find check-in camera capture image
                  let checkinImage = diskFiles[empId].find(file => 
                    file.toLowerCase().includes('checkin') || 
                    file.toLowerCase().includes('check-in') ||
                    file.toLowerCase().includes('in')
                  );
                  
                  // Find check-out camera capture image
                  let checkoutImage = diskFiles[empId].find(file => 
                    file.toLowerCase().includes('checkout') || 
                    file.toLowerCase().includes('check-out') ||
                    file.toLowerCase().includes('out')
                  );
                  
                  // If no specific images found, use first two images
                  if (!checkinImage && diskFiles[empId].length > 0) {
                    checkinImage = diskFiles[empId][0];
                    console.log('  🎯 Using first camera capture image as check-in:', checkinImage);
                  }
                  
                  if (!checkoutImage && diskFiles[empId].length > 1) {
                    checkoutImage = diskFiles[empId][1];
                    console.log('  🎯 Using second camera capture image as check-out:', checkoutImage);
                  }
                  
                  // Update check-in camera capture image path
                  if (checkinImage) {
                    const checkinPath = '/uploads/employees/' + empId + '/' + checkinImage;
                    if (emp.attendance.today.checkInImage !== checkinPath) {
                      emp.attendance.today.checkInImage = checkinPath;
                      needsUpdate = true;
                      console.log('  ✅ SET check-in camera capture image:', checkinPath);
                      totalFixed++;
                    }
                  }
                  
                  // Update check-out camera capture image path
                  if (checkoutImage) {
                    const checkoutPath = '/uploads/employees/' + empId + '/' + checkoutImage;
                    if (emp.attendance.today.checkOutImage !== checkoutPath) {
                      emp.attendance.today.checkOutImage = checkoutPath;
                      needsUpdate = true;
                      console.log('  ✅ SET check-out camera capture image:', checkoutPath);
                      totalFixed++;
                    }
                  }
                } else {
                  console.log('  ❌ No camera capture images found for this employee');
                }
                
                if (needsUpdate) {
                  await emp.save();
                  console.log('  💾 Saved employee record with camera capture images');
                }
              }
              
              console.log('\n🎯 CAMERA CAPTURE IMAGE DISPLAY FIX COMPLETE!');
              console.log('📊 Total camera capture image paths fixed:', totalFixed);
              
              // Final verification
              console.log('\n🔍 FINAL VERIFICATION - Camera capture images will now display:');
              const finalEmployees = await Employee.find({});
              for (const emp of finalEmployees) {
                if (emp.attendance?.today) {
                  const today = emp.attendance.today;
                  console.log('\n👤 Employee:', emp.name);
                  if (today.checkInImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkInImage));
                    console.log('  📸 Check-in camera capture:', today.checkInImage, exists ? '✅ WILL DISPLAY' : '❌');
                  }
                  if (today.checkOutImage) {
                    const exists = fs.existsSync(path.join('/app', today.checkOutImage));
                    console.log('  📸 Check-out camera capture:', today.checkOutImage, exists ? '✅ WILL DISPLAY' : '❌');
                  }
                }
              }
              
              console.log('\n🎯 CAMERA CAPTURE IMAGES WILL NOW DISPLAY IN ADMIN PANEL!');
              
              process.exit(0);
            })
            .catch(err => {
              console.error('❌ Camera capture image display fix error:', err);
              process.exit(1);
            });
        \" &&
        echo '🚀 Starting backend server...' &&
        npm start
      "

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - attendance-network
    command: mongod --bind_ip_all

volumes:
  mongo_data:
    driver: local
  uploads_data:
    driver: local

networks:
  attendance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16