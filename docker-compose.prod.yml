version: '3.8'

services:
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        ENABLE_SSL: "true"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    environment:
      # Use same-origin API via Nginx proxy
      - REACT_APP_API_URL=/api
      - TZ=Asia/Kolkata
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./certs:/etc/nginx/certs:ro

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URL=mongodb://mongo:27017/attendanceportal
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TZ=Asia/Kolkata
      - MONGODB_URI=mongodb://mongo:27017/attendanceportal
      - WORKING_HOURS_START=09:00
      - WORKING_HOURS_END=17:45
      - LATE_THRESHOLD_MINUTES=15
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=/app/uploads
      - FRONTEND_ORIGIN=https://hzzeinfo.xyz
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - attendance-network
    volumes:
      - ./Backend/scripts:/app/scripts:ro
      - uploads_data:/app/uploads
    command: >
      sh -c "
        echo 'üöÄ Starting production deployment initialization...' &&
        echo '‚è≥ Waiting for MongoDB to be ready...' &&
        sleep 15 &&
        echo 'üîç Checking if admin user exists...' &&
        node -e \"
          const mongoose = require('mongoose');
          const User = require('./models/User');
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              const adminExists = await User.findOne({ role: 'admin' });
              if (!adminExists) {
                console.log('üë§ Admin user not found, creating...');
                require('./scripts/createAdmin.js');
                require('./scripts/addEmployee.js');
              } else {
                console.log('‚úÖ Admin user already exists, skipping initialization');
              }
            })
            .catch(err => {
              console.log('‚ùå Error checking admin user:', err.message);
            });
        \" &&
        echo 'üîç Verifying employee database and image storage...' &&
        node check-employee.js &&
        echo 'üì∏ Ensuring uploads directory structure...' &&
        mkdir -p /app/uploads/employees &&
        echo 'üîß Checking image file paths and fixing database...' &&
        node -e \"
          const mongoose = require('mongoose');
          const Employee = require('./models/Employee');
          const fs = require('fs');
          const path = require('path');
          
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://mongo:27017/attendanceportal')
            .then(async () => {
              console.log('üîç Checking and fixing image paths...');
              
              const employees = await Employee.find({});
              let fixedCount = 0;
              
              for (const emp of employees) {
                let needsUpdate = false;
                
                if (emp.attendance?.today?.checkInImage) {
                  const fullPath = path.join('/app', emp.attendance.today.checkInImage);
                  if (!fs.existsSync(fullPath)) {
                    // Try to find the actual file
                    const employeeDir = path.join('/app/uploads/employees', emp._id.toString());
                    if (fs.existsSync(employeeDir)) {
                      const files = fs.readdirSync(employeeDir);
                      const imageFiles = files.filter(file => file.toLowerCase().includes('checkin') && (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')));
                      if (imageFiles.length > 0) {
                        const correctPath = '/uploads/employees/' + emp._id.toString() + '/' + imageFiles[0];
                        emp.attendance.today.checkInImage = correctPath;
                        needsUpdate = true;
                        console.log('üîß Fixed check-in image path for', emp.name, ':', correctPath);
                      }
                    }
                  }
                }
                
                if (emp.attendance?.today?.checkOutImage) {
                  const fullPath = path.join('/app', emp.attendance.today.checkOutImage);
                  if (!fs.existsSync(fullPath)) {
                    // Try to find the actual file
                    const employeeDir = path.join('/app/uploads/employees', emp._id.toString());
                    if (fs.existsSync(employeeDir)) {
                      const files = fs.readdirSync(employeeDir);
                      const imageFiles = files.filter(file => file.toLowerCase().includes('checkout') && (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')));
                      if (imageFiles.length > 0) {
                        const correctPath = '/uploads/employees/' + emp._id.toString() + '/' + imageFiles[0];
                        emp.attendance.today.checkOutImage = correctPath;
                        needsUpdate = true;
                        console.log('üîß Fixed check-out image path for', emp.name, ':', correctPath);
                      }
                    }
                  }
                }
                
                if (needsUpdate) {
                  await emp.save();
                  fixedCount++;
                }
              }
              
              console.log('‚úÖ Fixed image paths for', fixedCount, 'employees');
              process.exit(0);
            })
            .catch(err => {
              console.error('‚ùå Image path fix error:', err);
              process.exit(1);
            });
        \" &&
        echo 'üöÄ Starting backend server...' &&
        npm start
      "

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - attendance-network
    command: mongod --bind_ip_all

volumes:
  mongo_data:
    driver: local
  uploads_data:
    driver: local

networks:
  attendance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
